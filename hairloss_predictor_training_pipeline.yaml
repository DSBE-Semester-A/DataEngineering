# PIPELINE DEFINITION
# Name: hairloss-predictor-training-pipeline
# Inputs:
#    data_bucket: str
#    model_repo: str
#    project_id: str
#    testset_filename: str
#    trainset_filename: str
components:
  comp-download-data:
    executorLabel: exec-download-data
    inputDefinitions:
      parameters:
        bucket:
          parameterType: STRING
        file_name:
          parameterType: STRING
        project_id:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-download-data-2:
    executorLabel: exec-download-data-2
    inputDefinitions:
      parameters:
        bucket:
          parameterType: STRING
        file_name:
          parameterType: STRING
        project_id:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-predict-dt:
    executorLabel: exec-predict-dt
    inputDefinitions:
      artifacts:
        features:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        results:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-train-dt:
    executorLabel: exec-train-dt
    inputDefinitions:
      artifacts:
        features:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        out_model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        metrics:
          parameterType: STRUCT
  comp-upload-model-to-gcs:
    executorLabel: exec-upload-model-to-gcs
    inputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        model_repo:
          parameterType: STRING
        project_id:
          parameterType: STRING
deploymentSpec:
  executors:
    exec-download-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - download_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'google-cloud-storage'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef download_data(project_id: str, bucket: str, file_name: str, dataset:\
          \ Output[Dataset]):\n    '''download data'''\n    from google.cloud import\
          \ storage\n    import pandas as pd\n    import logging \n    import sys\n\
          \n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\n\n   \
          \ # Downloaing the file from a google bucket \n    client = storage.Client(project=project_id)\n\
          \    bucket = client.bucket(bucket)\n    blob = bucket.blob(file_name)\n\
          \    blob.download_to_filename(dataset.path + \".csv\")\n    logging.info('Downloaded\
          \ Data!')\n\n"
        image: python:3.10.7-slim
    exec-download-data-2:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - download_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'google-cloud-storage'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef download_data(project_id: str, bucket: str, file_name: str, dataset:\
          \ Output[Dataset]):\n    '''download data'''\n    from google.cloud import\
          \ storage\n    import pandas as pd\n    import logging \n    import sys\n\
          \n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\n\n   \
          \ # Downloaing the file from a google bucket \n    client = storage.Client(project=project_id)\n\
          \    bucket = client.bucket(bucket)\n    blob = bucket.blob(file_name)\n\
          \    blob.download_to_filename(dataset.path + \".csv\")\n    logging.info('Downloaded\
          \ Data!')\n\n"
        image: python:3.10.7-slim
    exec-predict-dt:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - predict_dt
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn==1.3.2'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef predict_dt(model: Input[Model], features: Input[Dataset], results:\
          \ Output[Dataset]):\n    '''train a DecisionTreeClassifier with default\
          \ parameters'''\n    import pandas as pd\n    from sklearn.tree import DecisionTreeClassifier\n\
          \    from sklearn.model_selection import train_test_split\n    import pickle\n\
          \    import logging\n    import sys\n\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO)\n\n    data = pd.read_csv(features.path + \".csv\"\
          )\n    xNew = data.loc[:, ['Genetics', 'Hormonal Changes', 'Medical Conditions',\
          \ 'Medications & Treatments',\n               'Nutritional Deficiencies',\
          \ 'Stress', 'Age', 'Poor Hair Care Habits',\n               'Environmental\
          \ Factors', 'Smoking', 'Weight Loss']].values\n    #load the model\n   \
          \ filename = model.path + \".pkl\"\n\n    #Loading the saved model\n   \
          \ model_dt = pickle.load(open(filename, 'rb'))\n\n    dfcp = data.copy()\n\
          \    result = model_dt.predict(xNew)   \n    y_classes = result.argmax(axis=-1)\n\
          \    logging.info(y_classes)\n    dfcp['pHairloss'] = y_classes.tolist()\n\
          \    dfcp.to_csv(results.path + \".csv\" , index=False, encoding='utf-8-sig')\n\
          \n"
        image: python:3.10.7-slim
    exec-train-dt:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_dt
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn==1.3.2'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_dt(features: Input[Dataset], out_model: Output[Model])\
          \ -> NamedTuple('outputs', metrics=dict):\n    '''train a DecisionTreeClassifier\
          \ with default parameters'''\n    import pandas as pd\n    from sklearn.tree\
          \ import DecisionTreeClassifier\n    from sklearn.model_selection import\
          \ train_test_split\n    import pickle\n    import logging\n    import sys\n\
          \n    data = pd.read_csv(features.path + \".csv\")\n    x_train, x_test,\
          \ y_train, y_test = train_test_split(data.drop('Hair Loss',axis=1), \n \
          \                                                   data['Hair Loss'], test_size=0.30,\
          \ \n                                                    random_state=101)\n\
          \    model_dt = DecisionTreeClassifier()\n    model_dt.fit(x_train, y_train)\n\
          \n    metrics_dict = {\n        \"accuracy\": model_dt.score(x_test, y_test)\n\
          \    }\n    logging.info(metrics_dict)  \n\n    out_model.metadata[\"file_type\"\
          ] = \".pkl\"\n    out_model.metadata[\"algo\"] = \"lr\"\n   # Save the model\n\
          \    m_file = out_model.path + \".pkl\"\n    with open(m_file, \"wb\") as\
          \ model_file:\n        pickle.dump(model_dt, model_file)   \n\n    outputs\
          \ = NamedTuple('outputs', metrics=dict)\n    return outputs(metrics_dict)\n\
          \n"
        image: python:3.10.7-slim
    exec-upload-model-to-gcs:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - upload_model_to_gcs
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef upload_model_to_gcs(project_id: str, model_repo: str, model:\
          \ Input[Model]):\n    '''upload model to gsc'''\n    from google.cloud import\
          \ storage   \n    import logging \n    import sys\n\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO)    \n\n    # upload the model to GCS\n    client =\
          \ storage.Client(project=project_id)\n    bucket = client.bucket(model_repo)\n\
          \    blob = bucket.blob(str(model.metadata[\"algo\"]) + '_model' + str(model.metadata[\"\
          file_type\"])) \n    blob.upload_from_filename(model.path + str(model.metadata[\"\
          file_type\"]))       \n\n    print(\"Saved the model to GCP bucket : \"\
          \ + model_repo)\n\n"
        image: python:3.10.7-slim
pipelineInfo:
  name: hairloss-predictor-training-pipeline
root:
  dag:
    tasks:
      download-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-download-data
        inputs:
          parameters:
            bucket:
              componentInputParameter: data_bucket
            file_name:
              componentInputParameter: trainset_filename
            project_id:
              componentInputParameter: project_id
        taskInfo:
          name: download-data
      download-data-2:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-download-data-2
        dependentTasks:
        - train-dt
        inputs:
          parameters:
            bucket:
              componentInputParameter: data_bucket
            file_name:
              componentInputParameter: testset_filename
            project_id:
              componentInputParameter: project_id
        taskInfo:
          name: download-data-2
      predict-dt:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-predict-dt
        dependentTasks:
        - download-data-2
        - train-dt
        inputs:
          artifacts:
            features:
              taskOutputArtifact:
                outputArtifactKey: dataset
                producerTask: download-data-2
            model:
              taskOutputArtifact:
                outputArtifactKey: out_model
                producerTask: train-dt
        taskInfo:
          name: predict-dt
      train-dt:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-dt
        dependentTasks:
        - download-data
        inputs:
          artifacts:
            features:
              taskOutputArtifact:
                outputArtifactKey: dataset
                producerTask: download-data
        taskInfo:
          name: train-dt
      upload-model-to-gcs:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-upload-model-to-gcs
        dependentTasks:
        - predict-dt
        - train-dt
        inputs:
          artifacts:
            model:
              taskOutputArtifact:
                outputArtifactKey: out_model
                producerTask: train-dt
          parameters:
            model_repo:
              componentInputParameter: model_repo
            project_id:
              componentInputParameter: project_id
        taskInfo:
          name: upload-model-to-gcs
  inputDefinitions:
    parameters:
      data_bucket:
        parameterType: STRING
      model_repo:
        parameterType: STRING
      project_id:
        parameterType: STRING
      testset_filename:
        parameterType: STRING
      trainset_filename:
        parameterType: STRING
schemaVersion: 2.1.0
sdkVersion: kfp-2.7.0
